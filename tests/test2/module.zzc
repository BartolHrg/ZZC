struct MatrixIndex { int i, j; };

template <int HEIGHT, int WIDTH = HEIGHT>
struct Matrix {
protected:
	int arr[HEIGHT][WIDTH];
public:
	fun int& operator [](MatrixIndex index) {
		return self.arr[index.i][index.j];
	}
	fun void transpose(Matrix<WIDTH, HEIGHT>& result) {
		for (int i = 0; i < HEIGHT; ++i) {
			for (int j = 0; j < WIDTH; ++j) {
				result[{j, i}] = self[{i, j}];
			}
		}
	}
	template <int D3 = HEIGHT>
	fun void multiply(Matrix<WIDTH, D3>& other, Matrix<HEIGHT, D3>& result) {
		for (int i = 0; i < HEIGHT; ++i) {
			for (int k = 0; k < D3; ++k) {
				int sum = 0;
				for (int j = 0; j < WIDTH; ++j) {
					sum += self[{i, j}] * other[{j, k}];
				}
				result[{i, k}] = sum;
			}
		}
	}
};

struct MyType {
	int x;
	void f() {}
};
